/*
 * Copyright (C) 2025 Bitsea GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https:www.apache.orglicensesLICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

package eu.occtet.bocfrontend.view.vexData.fragment;


import com.vaadin.flow.component.AbstractField;
import com.vaadin.flow.component.textfield.TextField;
import eu.occtet.bocfrontend.entity.VexData;
import eu.occtet.bocfrontend.entity.Vulnerability;
import eu.occtet.bocfrontend.factory.VexDataFactory;
import eu.occtet.bocfrontend.model.vexModels.*;
import io.jmix.flowui.Fragments;
import io.jmix.flowui.component.SupportsTypedValue;
import io.jmix.flowui.component.combobox.JmixComboBox;
import io.jmix.flowui.component.details.JmixDetails;
import io.jmix.flowui.component.textfield.TypedTextField;
import io.jmix.flowui.fragment.Fragment;
import io.jmix.flowui.fragment.FragmentDescriptor;
import io.jmix.flowui.view.Subscribe;
import io.jmix.flowui.view.Target;
import io.jmix.flowui.view.View;
import io.jmix.flowui.view.ViewComponent;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;

@FragmentDescriptor("vex-vulnerability-fragment.xml")
public class VexVulnerabilityFragment extends VexDetailFragment {

    private static final Logger log = LogManager.getLogger(VexVulnerabilityFragment.class);
    @Autowired
    private VexDataFactory vexDataFactory;

    @ViewComponent
    private TextField id;

    @ViewComponent
    private TextField source;

    @Autowired
    private Fragments fragments;

    @ViewComponent
    private JmixDetails analysisBox;

    private Vulnerability vulnerability;

    private VexVulnerabilityAnalysisFragment analysisFragment;

    public void setVulnerability(Vulnerability vulnerability) {
        this.vulnerability =vulnerability;
    }

    protected String getVulnerabilityId(){
        return id.getValue();
    }

    protected String getVulnerabilitySource(){
        return source.getValue();
    }

    @Subscribe(target = Target.HOST_CONTROLLER)
    public void onHostReady(final View.ReadyEvent event) {
        id.setValue(vulnerability.getVulnerabilityId());
        source.setValue(vulnerability.getSourceUrl());

        analysisFragment = fragments.create(this, VexVulnerabilityAnalysisFragment.class);
        analysisBox.add(analysisFragment);
    }

    @Subscribe("id")
    public void onIdTypedValueChange(final SupportsTypedValue.TypedValueChangeEvent<TypedTextField<?>, ?> event) {
        changeVulnerabilityValues();
    }

    @Subscribe("source")
    public void onSourceTypedValueChange(final SupportsTypedValue.TypedValueChangeEvent<TypedTextField<?>, ?> event) {
        changeVulnerabilityValues();
    }


    private void changeVulnerabilityValues(){
        VexVulnerability vexVulnerability = new VexVulnerability(id.getValue(), new VexVulnerabilitySource(source.getValue()), new VexVulnerabilityAnalysis(analysisFragment.getState(), analysisFragment.getJustification(), analysisFragment.getJustification()));
        vexDataFactory.addVulnerabilityDataAsJson(vexData, vexVulnerability);
    }



}

