/*
 * Copyright (C) 2025 Bitsea GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https:www.apache.orglicensesLICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

package eu.occtet.bocfrontend.view.vexData.fragment;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.vaadin.flow.component.AbstractField;
import com.vaadin.flow.component.combobox.ComboBox;
import com.vaadin.flow.component.textfield.TextField;
import eu.occtet.bocfrontend.entity.VexData;
import eu.occtet.bocfrontend.factory.VexDataFactory;
import eu.occtet.bocfrontend.model.vexModels.*;
import eu.occtet.bocfrontend.view.audit.fragment.Vulnerabilitytabfragment;
import io.jmix.flowui.component.SupportsTypedValue;
import io.jmix.flowui.component.combobox.JmixComboBox;
import io.jmix.flowui.component.textfield.TypedTextField;
import io.jmix.flowui.fragment.FragmentDescriptor;
import io.jmix.flowui.view.Subscribe;
import io.jmix.flowui.view.Target;
import io.jmix.flowui.view.View;
import io.jmix.flowui.view.ViewComponent;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;

@FragmentDescriptor("vex-vulnerability-analysis-fragment.xml")
public class VexVulnerabilityAnalysisFragment extends VexDetailFragment{

    private static final Logger log = LogManager.getLogger(VexVulnerabilityAnalysisFragment.class);

    private VexVulnerability vexVulnerability;

    @ViewComponent
    private ComboBox justification;

    @ViewComponent
    private ComboBox state;

    @ViewComponent
    private TextField details;

    @Autowired
    private VexDataFactory vexDataFactory;


   public String getJustification() {
        return justification.getElement().toString();
    }

    public String getState() {
        return state.getElement().toString();
    }

    public String getDetails(){
        return details.getValue();
    }

    @Subscribe("details")
    public void onDetailsTypedValueChange(final SupportsTypedValue.TypedValueChangeEvent<TypedTextField<?>, ?> event) {
        changeAnalysisData(vexData, justification.getElement().toString(), state.getElement().toString(), details.getValue());

    }

    @Subscribe("state")
    public void onStateComponentValueChange(final AbstractField.ComponentValueChangeEvent<JmixComboBox<VexAnalysisState>, VexAnalysisState> event) {
        changeAnalysisData(vexData, justification.getElement().toString(), event.getValue().getId(), details.getValue());

    }

    @Subscribe("jutsification")
    public void onJustificationComponentValueChange(final AbstractField.ComponentValueChangeEvent<JmixComboBox<VexJustification>, VexJustification> event) {
        changeAnalysisData(vexData, event.getValue().getId(), state.getElement().toString(), details.getValue());

    }

    private void changeAnalysisData(VexData vexData, String justification, String state, String details){
        VexVulnerabilityFragment parentView = (VexVulnerabilityFragment) getParentController();
        String id = parentView.getVulnerabilityId();
        String source = parentView.getVulnerabilitySource();
        VexVulnerability vexVulnerability = new VexVulnerability(id, new VexVulnerabilitySource(source), new VexVulnerabilityAnalysis(state, justification, details));
        vexDataFactory.addVulnerabilityDataAsJson(vexData, vexVulnerability);
    }
}
