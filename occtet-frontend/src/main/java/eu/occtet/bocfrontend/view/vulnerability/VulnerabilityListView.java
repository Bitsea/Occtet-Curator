/*
 * Copyright (C) 2025 Bitsea GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https:www.apache.orglicensesLICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

package eu.occtet.bocfrontend.view.vulnerability;

import com.vaadin.flow.router.Route;
import eu.occtet.bocfrontend.entity.Vulnerability;
import eu.occtet.bocfrontend.view.main.MainView;

import io.jmix.flowui.component.grid.DataGridColumn;
import io.jmix.flowui.view.*;

import java.util.List;


@Route(value = "vulnerabilities", layout = MainView.class)
@ViewController(id = "Vulnerability.list")
@ViewDescriptor(path = "vulnerability-list-view.xml")
@LookupComponent("vulnerabilitiesDataGrid")
@DialogMode(width = "64em")
public class VulnerabilityListView extends StandardListView<Vulnerability> {

    @ViewComponent
    private DataGridColumn<Vulnerability> vulnerabilityIdCol;
    @ViewComponent
    private DataGridColumn<Vulnerability> aliasesCol;
    @ViewComponent
    private DataGridColumn<Vulnerability> weightedSeverityCol;
    @ViewComponent
    private DataGridColumn<Vulnerability> exploitabilityCol;
    @ViewComponent
    private DataGridColumn<Vulnerability> riskScoreCol;
    @ViewComponent
    private DataGridColumn<Vulnerability> sourceUrlCol;
    @ViewComponent
    private DataGridColumn<Vulnerability> createdAtCol;

    @Subscribe
    public void onInit(InitEvent event) {
        vulnerabilityIdCol.setTooltipGenerator(Vulnerability::getVulnerabilityId).setAutoWidth(true);
        aliasesCol.setTooltipGenerator(v -> {
            List<String> aliases = v.getAliases();
            return aliases == null || aliases.isEmpty()
                    ? "No aliases"
                    : aliases.size() + " alias(es): " + String.join(", ", aliases);
        }).setAutoWidth(true);
        weightedSeverityCol.setTooltipGenerator(v ->
                "Severity: " + v.getWeightedSeverity()).setAutoWidth(true);
        exploitabilityCol.setTooltipGenerator(v ->
                "Exploitability: " + v.getExploitability()).setAutoWidth(true);
        riskScoreCol.setTooltipGenerator(v ->
                "Risk score: " + v.getRiskScore()).setAutoWidth(true);
        sourceUrlCol.setTooltipGenerator(Vulnerability::getSourceUrl).setAutoWidth(true);
        createdAtCol.setTooltipGenerator(v ->
                v.getCreatedAt() != null ? v.getCreatedAt().toString() : "N/A").setAutoWidth(true);
    }
}