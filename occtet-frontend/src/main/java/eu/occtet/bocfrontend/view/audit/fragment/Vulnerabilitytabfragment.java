/*
 *  Copyright (C) 2025 Bitsea GmbH
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https:www.apache.orglicensesLICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  SPDX-License-Identifier: Apache-2.0
 *  License-Filename: LICENSE
 *
 *
 */

package eu.occtet.bocfrontend.view.audit.fragment;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.vaadin.flow.component.ClickEvent;
import com.vaadin.flow.component.button.ButtonVariant;
import com.vaadin.flow.component.icon.VaadinIcon;
import com.vaadin.flow.component.orderedlayout.VerticalLayout;
import com.vaadin.flow.data.renderer.ComponentRenderer;
import com.vaadin.flow.data.renderer.Renderer;
import eu.occtet.boc.model.VulnerabilityServiceWorkData;
import eu.occtet.boc.model.WorkTask;
import eu.occtet.bocfrontend.entity.SoftwareComponent;
import eu.occtet.bocfrontend.entity.Vulnerability;
import eu.occtet.bocfrontend.service.NatsService;
import eu.occtet.bocfrontend.view.vulnerability.VulnerabilityDetailView;
import io.jmix.flowui.DialogWindows;
import io.jmix.flowui.Notifications;
import io.jmix.flowui.fragment.Fragment;
import io.jmix.flowui.fragment.FragmentDescriptor;
import io.jmix.flowui.kit.component.button.JmixButton;
import io.jmix.flowui.model.CollectionContainer;
import io.jmix.flowui.model.DataContext;
import io.jmix.flowui.view.Subscribe;
import io.jmix.flowui.view.Supply;
import io.jmix.flowui.view.View;
import io.jmix.flowui.view.ViewComponent;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;

import java.nio.charset.StandardCharsets;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.Collections;
import java.util.List;

/**
 * This class represents the fragment responsible for displaying and managing the vulnerability tab in the UI.
 * The fragment provides functionality to manage vulnerabilities associated with a specific software component,
 * interact with related services, and display vulnerability details.
 */
@FragmentDescriptor("VulnerabilityTabFragment.xml")
public class Vulnerabilitytabfragment extends Fragment<VerticalLayout> {

    private static final Logger log = LogManager.getLogger(Vulnerabilitytabfragment.class);

    private View<?> hostView;
    private SoftwareComponent softwareComponent;

    @ViewComponent
    private CollectionContainer<Vulnerability> vulnerabilityDc;
    @ViewComponent
    private DataContext dataContext;
    @Autowired
    private DialogWindows dialogWindow;
    @Autowired
    private NatsService natsService;
    @Autowired
    private Notifications notifications;

    public void setHostView(View<?> hostView) {
        this.hostView = hostView;
    }

    public void setSoftwareComponent(SoftwareComponent softwareComponent) {
        this.softwareComponent = dataContext.merge(softwareComponent);
        refreshVulnerabilities();
    }

    /**
     * Handles the action triggered when the "Update Data" button is clicked.
     * This method creates a task containing the necessary information about a software component
     * and sends it as a message to the "vulnerability" microservice via NATS.
     *
     * @param event the click event associated with the "Update Data" button
     */
    @Subscribe("updateData")
    public void updateDataButtonAction(ClickEvent<JmixButton> event) {
        VulnerabilityServiceWorkData vulnerabilityServiceWorkData =
                new VulnerabilityServiceWorkData(softwareComponent.getId());
        WorkTask workTask = new WorkTask(
                "vulnerability_task",
                "sending software component to vulnerability microservice",
                LocalDateTime.now().atZone(ZoneId.systemDefault()).toInstant().getEpochSecond(),
                vulnerabilityServiceWorkData);
        ObjectMapper objectMapper = new ObjectMapper();
        try {
            String message = objectMapper.writeValueAsString(workTask);
            log.info("Sending software id to vulnerability microservice with message: {}", message);
            natsService.sendWorkMessageToStream("work.vulnerability", message.getBytes(StandardCharsets.UTF_8));
            notifications.show("Message sent to serive");
        } catch (Exception e) {
            log.error(e);
            notifications.show("Error sending data to vulnerability microservice: " + e.getMessage());
        }
    }

    @Supply(to = "vulnerabilityDataContainer.actions", subject = "renderer")
    private Renderer<Vulnerability> actionsButtonRenderer() {
        return new ComponentRenderer<>(vulnerability -> {
            JmixButton infoButton = uiComponents.create(JmixButton.class);
            infoButton.setIcon(VaadinIcon.INFO_CIRCLE.create());
            infoButton.addThemeVariants(ButtonVariant.LUMO_TERTIARY);
            infoButton.setTooltipText("View Details");

            infoButton.addClickListener(e -> {
                dialogWindow.view(hostView, VulnerabilityDetailView.class)
                        .withViewConfigurer(v -> v.setEntityToEdit(vulnerability)).open();
            });

            return infoButton;
        });
    }

    private void refreshVulnerabilities() {
        if (softwareComponent == null) {
            vulnerabilityDc.getMutableItems().clear();
            return;
        }

        List<Vulnerability> vulnerabilities = softwareComponent.getVulnerabilities();
        if (vulnerabilities == null) vulnerabilities = Collections.emptyList();

        // Remove duplicates which
        List<Vulnerability> distinctVulnerabilities = vulnerabilities.stream()
                .distinct()
                .toList();

        vulnerabilityDc.getMutableItems().clear();
        vulnerabilityDc.getMutableItems().addAll(distinctVulnerabilities);
    }
}