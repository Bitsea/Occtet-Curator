/*
 * Copyright (C) 2025 Bitsea GmbH
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https:www.apache.orglicensesLICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * SPDX-License-Identifier: Apache-2.0
 * License-Filename: LICENSE
 */

package eu.occtet.bocfrontend.view.vulnerability;


import com.vaadin.flow.component.html.Span;
import com.vaadin.flow.component.textfield.TextArea;
import com.vaadin.flow.router.Route;
import eu.occtet.bocfrontend.dao.InventoryItemRepository;
import eu.occtet.bocfrontend.dao.SoftwareComponentRepository;
import eu.occtet.bocfrontend.entity.InventoryItem;
import eu.occtet.bocfrontend.entity.Project;
import eu.occtet.bocfrontend.entity.SoftwareComponent;
import eu.occtet.bocfrontend.entity.Vulnerability;
import eu.occtet.bocfrontend.view.main.MainView;
import io.jmix.flowui.component.combobox.JmixComboBox;
import io.jmix.flowui.component.grid.DataGrid;
import io.jmix.flowui.model.CollectionContainer;
import io.jmix.flowui.view.*;
import org.springframework.beans.factory.annotation.Autowired;

import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

@Route(value = "vulnerability/:id", layout = MainView.class)
@ViewController(id = "Vulnerability.detail")
@ViewDescriptor(path = "vulnerability-detail-view.xml")
@EditedEntityContainer("vulnerabilityDc")
public class VulnerabilityDetailView extends StandardDetailView<Vulnerability> {

    @ViewComponent
    private TextArea aliasesField;

    @ViewComponent
    private TextArea fixedPackagesField;

    @ViewComponent
    private TextArea referencesField;

    @ViewComponent
    private CollectionContainer<InventoryItem> inventoryItemsDc;

    @ViewComponent
    private JmixComboBox<Project> projectComboBox;

    @ViewComponent
    private JmixComboBox<SoftwareComponent> softwareComboBox;

    @ViewComponent
    private Span created;

    @Autowired
    private InventoryItemRepository inventoryItemRepository;




    @Subscribe
    public void onBeforeShow(BeforeShowEvent event) {
        Vulnerability vuln = getEditedEntity();
        created.setText(vuln.getCreatedAt().format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm")).toString());

        aliasesField.setValue(
                (vuln.getAliases() == null || vuln.getAliases().isEmpty())
                        ? ""
                        : String.join("\n", vuln.getAliases())
        );

        fixedPackagesField.setValue(
                (vuln.getFixedPackages() == null || vuln.getFixedPackages().isEmpty())
                        ? ""
                        : String.join("\n", vuln.getFixedPackages())
        );

        referencesField.setValue(
                (vuln.getReferences() == null || vuln.getReferences().isEmpty())
                        ? ""
                        : String.join("\n", vuln.getReferences())
        );

        List<InventoryItem> findings = getFindings(vuln);

        if (!findings.isEmpty()){
            List<Project> projects = new ArrayList<>();
            List<SoftwareComponent> sc = new ArrayList<>();
            for(InventoryItem item : findings){projects.add(item.getProject());sc.add(item.getSoftwareComponent());}
            projectComboBox.setItems(projects);
            projectComboBox.setItemLabelGenerator(Project::getProjectName);
            softwareComboBox.setItems(sc);
            softwareComboBox.setItemLabelGenerator(SoftwareComponent::getName);
        }
        inventoryItemsDc.setItems(findings);
    }

    private List<InventoryItem> getFindings(Vulnerability vulnerability){

        List<InventoryItem> allInv = inventoryItemRepository.findAll();
        List<InventoryItem> findings = new ArrayList<>();

        for(InventoryItem item : allInv){
            if(item.getSoftwareComponent() != null){
                if(item.getSoftwareComponent().getVulnerabilities().contains(vulnerability)){
                    findings.add(item);
                }
            }
        }
        return findings;
    }
}