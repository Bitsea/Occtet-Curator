package eu.occtet.boc.vulnerability.service;

import eu.occtet.boc.entity.Vulnerability;
import eu.occtet.boc.vulnerability.dao.VulnerabilityRepository;
import eu.occtet.boc.vulnerability.factory.VulnerabilityFactory;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Service
public class VulnerabilityService {

    private static final Logger log = LogManager.getLogger(VulnerabilityService.class);

    @Autowired
    private VulnerabilityFactory vulnerabilityFactory;
    @Autowired
    private VulnerabilityRepository vulnerabilityRepository;

    public Vulnerability getOrCreate(String vulnerabilityId, String summary, List<String> aliases,
                                     Double weightedSeverity, Double exploitability, Double riskScore,
                                     List<String> fixedPackages, String sourceUrl, List<String> references) {
        Optional<Vulnerability> vulnerabilityOptional = vulnerabilityRepository.findByVulnerabilityId(vulnerabilityId);

        return vulnerabilityOptional
                .map(vulnerability -> update(vulnerability, summary, aliases, weightedSeverity, exploitability, riskScore, fixedPackages, sourceUrl, references))
                .orElseGet(() -> vulnerabilityFactory.create(vulnerabilityId, summary, aliases, weightedSeverity, exploitability, riskScore, fixedPackages, sourceUrl, references));
    }

    private Vulnerability update(Vulnerability old ,String summary, List<String> aliases,
                                 Double weightedSeverity, Double exploitability, Double riskScore,
                                 List<String> fixedPackages, String sourceUrl, List<String> references){
        old.setSummary(summary);
        old.setAliases(new ArrayList<>(aliases));
        old.setWeightedSeverity(weightedSeverity);
        old.setExploitability(exploitability);
        old.setRiskScore(riskScore);
        old.setFixedPackages(new ArrayList<>(fixedPackages));
        old.setSourceUrl(sourceUrl);
        old.setReferences(new ArrayList<>(references));
        log.info("Pre-existing vulnerability updated");
        return vulnerabilityRepository.save(old);
    }
}
