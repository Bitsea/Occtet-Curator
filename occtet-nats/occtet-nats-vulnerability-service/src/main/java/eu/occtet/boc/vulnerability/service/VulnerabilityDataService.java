package eu.occtet.boc.vulnerability.service;

import eu.occtet.boc.entity.SoftwareComponent;
import eu.occtet.boc.entity.Vulnerability;
import eu.occtet.boc.vulnerability.dao.SoftwareComponentRepository;
import eu.occtet.boc.vulnerability.model.vulnerablecode.*;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestClient;

import java.util.*;

/**
 * Service class to interact with the VulnerableCode API and process vulnerability data.
 * This class provides methods to retrieve package data based on a package URL (purl)
 * and to extract vulnerability information from the response data.
 */
@Service
public class VulnerabilityDataService {

    private static final Logger log = LogManager.getLogger(VulnerabilityDataService.class);

    @Autowired
    private VulnerabilityService vulnerabilityService;

    @Autowired
    private SoftwareComponentRepository softwareComponentRepository;

    @Autowired
    @Qualifier("vulnerableCodeRestClient")
    private RestClient restClient;

    public List<Vulnerability> generateVulnerabilities(UUID scId) {
        try {
            SoftwareComponent softwareComponent = softwareComponentRepository.findById(scId)
                    .orElse(null);
            if (softwareComponent == null) {
                log.error("Software component not found for id {}", scId);
                return Collections.emptyList();
            }

            Optional<PackageApiResponseDto> packageApiResponseDtoOptional = getPackageData(softwareComponent);

            List<Vulnerability> vulnerabilityList = softwareComponent.getVulnerabilities() == null ?
                    new ArrayList<>() : softwareComponent.getVulnerabilities();

            if (packageApiResponseDtoOptional.isEmpty()) {
                return vulnerabilityList;
            }

            PackageApiResponseDto packageApiResponseDto = packageApiResponseDtoOptional.get();
            if (packageApiResponseDto.count() == 0) {
                log.warn("No packages found in DB for name: {}, version: {}, purl: {}", softwareComponent.getName(), softwareComponent.getVersion(),
                        softwareComponent.getPurl());
                return vulnerabilityList;
            }
            if (packageApiResponseDto.count() > 1) {
                log.warn("Multiple packages found in DB for for name: {}, version: {}, purl: {}, using first result " +
                                "only!",
                        softwareComponent.getName(),
                        softwareComponent.getVersion(), softwareComponent.getPurl());
            }

            PackageResultDto packageResultDto = packageApiResponseDto.results().getFirst();
            List<VulnerabilityDto> vulnerabilityDtoList = packageResultDto.affectedByVulnerabilities();

            if (vulnerabilityDtoList == null || vulnerabilityDtoList.isEmpty()) {
                log.warn("No vulnerabilities found for package {}", packageResultDto.purl());
                return vulnerabilityList;
            }

            log.info("Found {} vulnerabilities for package: {}", vulnerabilityDtoList.size(), packageResultDto.purl());
            for (VulnerabilityDto vulnerabilityDto : vulnerabilityDtoList) {
                log.info("Proceed with vulnerability: {}", vulnerabilityDto.vulnerabilityId());
                List<String> fixedPackages = vulnerabilityDto.fixedPackages().stream()
                        .map(FixedPackageDto::resourceUrl)
                        .toList();

                List<String> references = vulnerabilityDto.references().stream()
                        .map(ReferenceDto::referenceUrl)
                        .toList();

                vulnerabilityList.add(vulnerabilityService.getOrCreate(
                        vulnerabilityDto.vulnerabilityId(),
                        vulnerabilityDto.summary(),
                        vulnerabilityDto.aliases(),
                        Double.valueOf(vulnerabilityDto.weightedSeverity()),
                        Double.valueOf(vulnerabilityDto.exploitability()),
                        vulnerabilityDto.riskScore(),
                        fixedPackages,
                        vulnerabilityDto.resourceUrl(),
                        references
                ));
            }
            softwareComponent.setVulnerabilities(vulnerabilityList);
            softwareComponentRepository.save(softwareComponent);
            log.info("Finished generating vulnerabilities for software component: {}", softwareComponent.getName());

            return vulnerabilityList;
        } catch (Exception e) {
            log.error("Exception when getting response from VulnerableCode: ", e);
            return Collections.emptyList();
        }
    }


    /**
     * Retrieves package data from the VulnerableCode API using the provided package URL (purl).
     * The method initializes a RestClient, makes a GET request to the API, and parses the
     * response into a PackageApiResponse object and returns the package result if it exists.
     */
    private Optional<PackageApiResponseDto> getPackageData(SoftwareComponent softwareComponent){
        try{
            ResponseEntity<PackageApiResponseDto> response = null;

            String purl = softwareComponent.getPurl();
            String version = softwareComponent.getVersion();
            String name = softwareComponent.getName();

            if (purl == null || purl.isBlank()) {
                log.warn("No purl found for software component will try with name and version");
                if (name != null && !name.isBlank()){
                    response = getPackageDataResponse(version, name);
                }
            } else {
                response = getPackageDataResponse(purl);
            }

            log.info("response status: {}", Objects.requireNonNull(response).getStatusCode());
            return Optional.ofNullable(response.getBody());
        } catch (Exception e){
            log.error("Exception when getting response from VulnerableCode: {}", e.getMessage());
        }
        return Optional.empty();
    }

    private ResponseEntity<PackageApiResponseDto> getPackageDataResponse(String purl){
        log.info("Fetching package data for purl: {}", purl);
        return restClient.get()
                .uri("/api/packages?purl={purl}", purl)
                .retrieve()
                .toEntity(PackageApiResponseDto.class);
    }

    private ResponseEntity<PackageApiResponseDto> getPackageDataResponse(String version, String name){
        log.info("Fetching package data for component name: {} and version: {}", name, version);
        if (version == null || version.isBlank()) {
            log.warn("No version found for component name: {} will try with name only, which will then use the " +
                    "oldest version found", name);
            return restClient.get()
                    .uri("/api/packages?name={name}", name)
                    .retrieve()
                    .toEntity(PackageApiResponseDto.class);
        }
        return restClient.get()
                .uri("/api/packages?name={name}&version={version}", name, version)
                .retrieve()
                .toEntity(PackageApiResponseDto.class);
    }
}
