/*
 *
 *  Copyright (C) 2025 Bitsea GmbH
 *  *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 *  SPDX-License-Identifier: Apache-2.0
 *  License-Filename: LICENSE
 * /
 *
 */

package eu.occtet.boc.vulnerability.service;

import eu.occtet.boc.entity.SoftwareComponent;
import eu.occtet.boc.entity.Vulnerability;
import eu.occtet.boc.vulnerability.dao.SoftwareComponentRepository;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
import java.util.UUID;

import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest
@Transactional
@ActiveProfiles("test")
public class VulnerabilityDataServiceTest {

    @Autowired
    private SoftwareComponentRepository softwareComponentRepository;
    @Autowired
    private VulnerabilityDataService vulnerabilityDataService;

    @Test
    void testGenerateVulnerabilitiesOfVulnerablePackageUsingPurl(){
         SoftwareComponent softwareComponent = new SoftwareComponent();
         softwareComponent.setPurl("pkg:maven/com.google.code.gson/gson@1.1");
         softwareComponent.setName("");
         softwareComponent.setVersion("");
         softwareComponentRepository.save(softwareComponent);
         List<Vulnerability> vulnerabilityList = vulnerabilityDataService.generateVulnerabilities(softwareComponent.getId());

         assertEquals(1, vulnerabilityList.size());
         Vulnerability vulnerability = vulnerabilityList.getFirst();
         assertEquals("VCID-nze3-w2ta-aaas", vulnerability.getVulnerabilityId());
         assertEquals("Deserialization of Untrusted Data in Gson", vulnerability.getSummary());

         String expectedAlias1 = "CVE-2022-25647";
         String expectedAlias2 = "GHSA-4jrv-ppp4-jm57";
         assertTrue(vulnerability.getAliases().contains(expectedAlias1));
         assertTrue(vulnerability.getAliases().contains(expectedAlias2));

         assertEquals(8.0, vulnerability.getWeightedSeverity());
         assertEquals(0.5, vulnerability.getExploitability());
         assertEquals(4.0, vulnerability.getRiskScore());

        assertEquals("http://public.vulnerablecode.io/packages/pkg:maven/com.google.code.gson/gson@2.8.9",
                vulnerability.getFixedPackages().getFirst());
        assertEquals("http://public.vulnerablecode.io/vulnerabilities/VCID-nze3-w2ta-aaas", vulnerability.getSourceUrl());
        assertEquals(45, vulnerability.getReferences().size());
    }

    @Test
    void testGenerateVulnerabilitiesOfVulnerablePackageUsingNameAndVersion(){
        SoftwareComponent softwareComponent = new SoftwareComponent();
        softwareComponent.setName("gson");
        softwareComponent.setVersion("1.1");
        softwareComponentRepository.save(softwareComponent);
        List<Vulnerability> vulnerabilityList = vulnerabilityDataService.generateVulnerabilities(softwareComponent.getId());

        assertEquals(1, vulnerabilityList.size());
        Vulnerability vulnerability = vulnerabilityList.getFirst();
        assertEquals("VCID-nze3-w2ta-aaas", vulnerability.getVulnerabilityId());
        assertEquals("Deserialization of Untrusted Data in Gson", vulnerability.getSummary());

        String expectedAlias1 = "CVE-2022-25647";
        String expectedAlias2 = "GHSA-4jrv-ppp4-jm57";
        assertTrue(vulnerability.getAliases().contains(expectedAlias1));
        assertTrue(vulnerability.getAliases().contains(expectedAlias2));

        assertEquals(8.0, vulnerability.getWeightedSeverity());
        assertEquals(0.5, vulnerability.getExploitability());
        assertEquals(4.0, vulnerability.getRiskScore());

        assertEquals("http://public.vulnerablecode.io/packages/pkg:maven/com.google.code.gson/gson@2.8.9",
                vulnerability.getFixedPackages().getFirst());
        assertEquals("http://public.vulnerablecode.io/vulnerabilities/VCID-nze3-w2ta-aaas", vulnerability.getSourceUrl());
        assertEquals(45, vulnerability.getReferences().size());    }

    @Test
    void testGenerateVulnerabilitiesOfVulnerablePackageUsingOnlyName(){
        SoftwareComponent softwareComponent = new SoftwareComponent();
        softwareComponent.setName("gson");
        softwareComponent.setVersion("");
        softwareComponentRepository.save(softwareComponent);
        List<Vulnerability> vulnerabilityList = vulnerabilityDataService.generateVulnerabilities(softwareComponent.getId());

        assertEquals(1, vulnerabilityList.size());
        Vulnerability vulnerability = vulnerabilityList.getFirst();
        assertEquals("VCID-nze3-w2ta-aaas", vulnerability.getVulnerabilityId());
        assertEquals("Deserialization of Untrusted Data in Gson", vulnerability.getSummary());

        String expectedAlias1 = "CVE-2022-25647";
        String expectedAlias2 = "GHSA-4jrv-ppp4-jm57";
        assertTrue(vulnerability.getAliases().contains(expectedAlias1));
        assertTrue(vulnerability.getAliases().contains(expectedAlias2));

        assertEquals(8.0, vulnerability.getWeightedSeverity());
        assertEquals(0.5, vulnerability.getExploitability());
        assertEquals(4.0, vulnerability.getRiskScore());

        assertEquals("http://public.vulnerablecode.io/packages/pkg:maven/com.google.code.gson/gson@2.8.9",
                vulnerability.getFixedPackages().getFirst());
        assertEquals("http://public.vulnerablecode.io/vulnerabilities/VCID-nze3-w2ta-aaas", vulnerability.getSourceUrl());
        assertEquals(45, vulnerability.getReferences().size());
    }

    @Test
    void testGenerateVulnerabilitiesOfInvulnerablePackage(){
        SoftwareComponent softwareComponent = new SoftwareComponent();
        softwareComponent.setPurl("pkg:alpine/junit@4.13.1-r0?arch=aarch64&distroversion=edge&reponame=community");
        softwareComponent.setName("junit");
        softwareComponent.setVersion("4.13.1-r0");
        softwareComponentRepository.save(softwareComponent);
        List<Vulnerability> vulnerabilityList = vulnerabilityDataService.generateVulnerabilities(softwareComponent.getId());

        assertTrue(vulnerabilityList.isEmpty());
    }

    @Test
    void testGenerateVulnerabilitiesOfInvalidInput(){
        List<Vulnerability> vulnerabilityList = vulnerabilityDataService.generateVulnerabilities(UUID.randomUUID());

        assertTrue(vulnerabilityList.isEmpty());
    }
}
